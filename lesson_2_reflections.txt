LESSON 2 - REFLECTIONS

What happens when you initialize a repository? Why do you need to do it?

    A folder named ".git" is created which contains all the repository data.
    This is necessary to create the structure needed for Git to keep track of
    all the changes to the files in the repository.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

    The staging area is a temporary environment of the repository which is a
    representation of a specific state of the working directory. The value it
    offers is that you can make some changes like adding files to the repository
    before actually committing the changes.

How can you use the staging area to make sure you have one commit per logical
change?

    You can use the command "git diff --staged" to compare the staging area to
    the most recent commit which will display all the pending changes. You can
    scan these changes to ensure that you have one logical change before you
    commit.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

    Branches would be helpful anytime you require two active states of your
    work. For example, you might have one branch for the last publicly released
    version of your project so you can refer to the most recent productive code
    and create branches from it to diagnose bugs. You might also have one branch
    for the next major release of your project that you can work on over a long
    period of time. In addition, you may have several branches from the last
    public release to track down and fix bugs. This would in turn result in
    additional minor releases for which branches would also be beneficial.

How do the diagrams help you visualize the branch structure?

    The diagrams provide an easy way to visualize the parent of each commit and
    if any commits are unreachable which would result in a 'detached HEAD'
    state. You can also trace back through the different branches to see where
    they split if you wish to merge them and would like some context in what has
    happened since they split.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

    Merging two branches together results in all of the changes being combined
    in a single branch and all being accessible from the one branch. This allows
    you to merge a completed function or change into the main branch and reduces
    complexity when two branches are no longer required. One important note is
    the commits are organized and ordered by timestamp so they may be out of
    order in the log. The diagram represents the merge by showing the two
    branches combining into a single branch.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?

    The pros of the automatic merge is that Git does a lot of the work for you
    when the changes are obvious and can be easily merged. Another pro is that
    Git alerts you of any changes that require human input. The cons of the
    automatic merge is that sometimes the automatic merge might get confused
    with some changes and may not always give you all of the information you
    need to make a merge decision and you may have to investigate the changes.
